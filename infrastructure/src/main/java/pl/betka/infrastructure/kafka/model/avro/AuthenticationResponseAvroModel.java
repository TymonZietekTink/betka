/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package pl.betka.infrastructure.kafka.model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AuthenticationResponseAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8937196933302579348L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AuthenticationResponseAvroModel\",\"namespace\":\"pl.betka.infrastructure.kafka.model.avro\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"bookmakerIdentifier\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"authenticationOutputData\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"authenticationStatus\",\"type\":{\"type\":\"enum\",\"name\":\"AuthenticationStatus\",\"symbols\":[\"STARTED\",\"AUTHENTICATING\",\"AUTHENTICATED\",\"FAILED\",\"NEEDS_ADDITIONAL_INPUT\"]}},{\"name\":\"errorMessage\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<AuthenticationResponseAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AuthenticationResponseAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AuthenticationResponseAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AuthenticationResponseAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AuthenticationResponseAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AuthenticationResponseAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AuthenticationResponseAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AuthenticationResponseAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AuthenticationResponseAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.util.UUID userId;
  private java.lang.String bookmakerIdentifier;
  private java.lang.String authenticationOutputData;
  private pl.betka.infrastructure.kafka.model.avro.AuthenticationStatus authenticationStatus;
  private java.lang.String errorMessage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AuthenticationResponseAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param userId The new value for userId
   * @param bookmakerIdentifier The new value for bookmakerIdentifier
   * @param authenticationOutputData The new value for authenticationOutputData
   * @param authenticationStatus The new value for authenticationStatus
   * @param errorMessage The new value for errorMessage
   */
  public AuthenticationResponseAvroModel(java.util.UUID id, java.util.UUID userId, java.lang.String bookmakerIdentifier, java.lang.String authenticationOutputData, pl.betka.infrastructure.kafka.model.avro.AuthenticationStatus authenticationStatus, java.lang.String errorMessage) {
    this.id = id;
    this.userId = userId;
    this.bookmakerIdentifier = bookmakerIdentifier;
    this.authenticationOutputData = authenticationOutputData;
    this.authenticationStatus = authenticationStatus;
    this.errorMessage = errorMessage;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return userId;
    case 2: return bookmakerIdentifier;
    case 3: return authenticationOutputData;
    case 4: return authenticationStatus;
    case 5: return errorMessage;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: userId = (java.util.UUID)value$; break;
    case 2: bookmakerIdentifier = value$ != null ? value$.toString() : null; break;
    case 3: authenticationOutputData = value$ != null ? value$.toString() : null; break;
    case 4: authenticationStatus = (pl.betka.infrastructure.kafka.model.avro.AuthenticationStatus)value$; break;
    case 5: errorMessage = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.util.UUID getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.util.UUID value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'bookmakerIdentifier' field.
   * @return The value of the 'bookmakerIdentifier' field.
   */
  public java.lang.String getBookmakerIdentifier() {
    return bookmakerIdentifier;
  }


  /**
   * Sets the value of the 'bookmakerIdentifier' field.
   * @param value the value to set.
   */
  public void setBookmakerIdentifier(java.lang.String value) {
    this.bookmakerIdentifier = value;
  }

  /**
   * Gets the value of the 'authenticationOutputData' field.
   * @return The value of the 'authenticationOutputData' field.
   */
  public java.lang.String getAuthenticationOutputData() {
    return authenticationOutputData;
  }


  /**
   * Sets the value of the 'authenticationOutputData' field.
   * @param value the value to set.
   */
  public void setAuthenticationOutputData(java.lang.String value) {
    this.authenticationOutputData = value;
  }

  /**
   * Gets the value of the 'authenticationStatus' field.
   * @return The value of the 'authenticationStatus' field.
   */
  public pl.betka.infrastructure.kafka.model.avro.AuthenticationStatus getAuthenticationStatus() {
    return authenticationStatus;
  }


  /**
   * Sets the value of the 'authenticationStatus' field.
   * @param value the value to set.
   */
  public void setAuthenticationStatus(pl.betka.infrastructure.kafka.model.avro.AuthenticationStatus value) {
    this.authenticationStatus = value;
  }

  /**
   * Gets the value of the 'errorMessage' field.
   * @return The value of the 'errorMessage' field.
   */
  public java.lang.String getErrorMessage() {
    return errorMessage;
  }


  /**
   * Sets the value of the 'errorMessage' field.
   * @param value the value to set.
   */
  public void setErrorMessage(java.lang.String value) {
    this.errorMessage = value;
  }

  /**
   * Creates a new AuthenticationResponseAvroModel RecordBuilder.
   * @return A new AuthenticationResponseAvroModel RecordBuilder
   */
  public static pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder newBuilder() {
    return new pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder();
  }

  /**
   * Creates a new AuthenticationResponseAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AuthenticationResponseAvroModel RecordBuilder
   */
  public static pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder newBuilder(pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder other) {
    if (other == null) {
      return new pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder();
    } else {
      return new pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new AuthenticationResponseAvroModel RecordBuilder by copying an existing AuthenticationResponseAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new AuthenticationResponseAvroModel RecordBuilder
   */
  public static pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder newBuilder(pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel other) {
    if (other == null) {
      return new pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder();
    } else {
      return new pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for AuthenticationResponseAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AuthenticationResponseAvroModel>
    implements org.apache.avro.data.RecordBuilder<AuthenticationResponseAvroModel> {

    private java.util.UUID id;
    private java.util.UUID userId;
    private java.lang.String bookmakerIdentifier;
    private java.lang.String authenticationOutputData;
    private pl.betka.infrastructure.kafka.model.avro.AuthenticationStatus authenticationStatus;
    private java.lang.String errorMessage;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.bookmakerIdentifier)) {
        this.bookmakerIdentifier = data().deepCopy(fields()[2].schema(), other.bookmakerIdentifier);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.authenticationOutputData)) {
        this.authenticationOutputData = data().deepCopy(fields()[3].schema(), other.authenticationOutputData);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.authenticationStatus)) {
        this.authenticationStatus = data().deepCopy(fields()[4].schema(), other.authenticationStatus);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.errorMessage)) {
        this.errorMessage = data().deepCopy(fields()[5].schema(), other.errorMessage);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing AuthenticationResponseAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bookmakerIdentifier)) {
        this.bookmakerIdentifier = data().deepCopy(fields()[2].schema(), other.bookmakerIdentifier);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.authenticationOutputData)) {
        this.authenticationOutputData = data().deepCopy(fields()[3].schema(), other.authenticationOutputData);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.authenticationStatus)) {
        this.authenticationStatus = data().deepCopy(fields()[4].schema(), other.authenticationStatus);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.errorMessage)) {
        this.errorMessage = data().deepCopy(fields()[5].schema(), other.errorMessage);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.util.UUID getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder setUserId(java.util.UUID value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookmakerIdentifier' field.
      * @return The value.
      */
    public java.lang.String getBookmakerIdentifier() {
      return bookmakerIdentifier;
    }


    /**
      * Sets the value of the 'bookmakerIdentifier' field.
      * @param value The value of 'bookmakerIdentifier'.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder setBookmakerIdentifier(java.lang.String value) {
      validate(fields()[2], value);
      this.bookmakerIdentifier = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bookmakerIdentifier' field has been set.
      * @return True if the 'bookmakerIdentifier' field has been set, false otherwise.
      */
    public boolean hasBookmakerIdentifier() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bookmakerIdentifier' field.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder clearBookmakerIdentifier() {
      bookmakerIdentifier = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'authenticationOutputData' field.
      * @return The value.
      */
    public java.lang.String getAuthenticationOutputData() {
      return authenticationOutputData;
    }


    /**
      * Sets the value of the 'authenticationOutputData' field.
      * @param value The value of 'authenticationOutputData'.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder setAuthenticationOutputData(java.lang.String value) {
      validate(fields()[3], value);
      this.authenticationOutputData = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'authenticationOutputData' field has been set.
      * @return True if the 'authenticationOutputData' field has been set, false otherwise.
      */
    public boolean hasAuthenticationOutputData() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'authenticationOutputData' field.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder clearAuthenticationOutputData() {
      authenticationOutputData = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'authenticationStatus' field.
      * @return The value.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationStatus getAuthenticationStatus() {
      return authenticationStatus;
    }


    /**
      * Sets the value of the 'authenticationStatus' field.
      * @param value The value of 'authenticationStatus'.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder setAuthenticationStatus(pl.betka.infrastructure.kafka.model.avro.AuthenticationStatus value) {
      validate(fields()[4], value);
      this.authenticationStatus = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'authenticationStatus' field has been set.
      * @return True if the 'authenticationStatus' field has been set, false otherwise.
      */
    public boolean hasAuthenticationStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'authenticationStatus' field.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder clearAuthenticationStatus() {
      authenticationStatus = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorMessage' field.
      * @return The value.
      */
    public java.lang.String getErrorMessage() {
      return errorMessage;
    }


    /**
      * Sets the value of the 'errorMessage' field.
      * @param value The value of 'errorMessage'.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder setErrorMessage(java.lang.String value) {
      validate(fields()[5], value);
      this.errorMessage = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'errorMessage' field has been set.
      * @return True if the 'errorMessage' field has been set, false otherwise.
      */
    public boolean hasErrorMessage() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'errorMessage' field.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationResponseAvroModel.Builder clearErrorMessage() {
      errorMessage = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AuthenticationResponseAvroModel build() {
      try {
        AuthenticationResponseAvroModel record = new AuthenticationResponseAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.util.UUID) defaultValue(fields()[1]);
        record.bookmakerIdentifier = fieldSetFlags()[2] ? this.bookmakerIdentifier : (java.lang.String) defaultValue(fields()[2]);
        record.authenticationOutputData = fieldSetFlags()[3] ? this.authenticationOutputData : (java.lang.String) defaultValue(fields()[3]);
        record.authenticationStatus = fieldSetFlags()[4] ? this.authenticationStatus : (pl.betka.infrastructure.kafka.model.avro.AuthenticationStatus) defaultValue(fields()[4]);
        record.errorMessage = fieldSetFlags()[5] ? this.errorMessage : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AuthenticationResponseAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<AuthenticationResponseAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AuthenticationResponseAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<AuthenticationResponseAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










