/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package pl.betka.infrastructure.kafka.model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AuthenticationRequestAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8440830623311619737L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AuthenticationRequestAvroModel\",\"namespace\":\"pl.betka.infrastructure.kafka.model.avro\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"bookmakerIdentifier\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"authenticationInputData\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastRefresh\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<AuthenticationRequestAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AuthenticationRequestAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AuthenticationRequestAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AuthenticationRequestAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AuthenticationRequestAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AuthenticationRequestAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AuthenticationRequestAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AuthenticationRequestAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AuthenticationRequestAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.lang.String bookmakerIdentifier;
  private java.lang.String authenticationInputData;
  private java.time.LocalDate lastRefresh;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AuthenticationRequestAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param bookmakerIdentifier The new value for bookmakerIdentifier
   * @param authenticationInputData The new value for authenticationInputData
   * @param lastRefresh The new value for lastRefresh
   */
  public AuthenticationRequestAvroModel(java.util.UUID id, java.lang.String bookmakerIdentifier, java.lang.String authenticationInputData, java.time.LocalDate lastRefresh) {
    this.id = id;
    this.bookmakerIdentifier = bookmakerIdentifier;
    this.authenticationInputData = authenticationInputData;
    this.lastRefresh = lastRefresh;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return bookmakerIdentifier;
    case 2: return authenticationInputData;
    case 3: return lastRefresh;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: bookmakerIdentifier = value$ != null ? value$.toString() : null; break;
    case 2: authenticationInputData = value$ != null ? value$.toString() : null; break;
    case 3: lastRefresh = (java.time.LocalDate)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'bookmakerIdentifier' field.
   * @return The value of the 'bookmakerIdentifier' field.
   */
  public java.lang.String getBookmakerIdentifier() {
    return bookmakerIdentifier;
  }


  /**
   * Sets the value of the 'bookmakerIdentifier' field.
   * @param value the value to set.
   */
  public void setBookmakerIdentifier(java.lang.String value) {
    this.bookmakerIdentifier = value;
  }

  /**
   * Gets the value of the 'authenticationInputData' field.
   * @return The value of the 'authenticationInputData' field.
   */
  public java.lang.String getAuthenticationInputData() {
    return authenticationInputData;
  }


  /**
   * Sets the value of the 'authenticationInputData' field.
   * @param value the value to set.
   */
  public void setAuthenticationInputData(java.lang.String value) {
    this.authenticationInputData = value;
  }

  /**
   * Gets the value of the 'lastRefresh' field.
   * @return The value of the 'lastRefresh' field.
   */
  public java.time.LocalDate getLastRefresh() {
    return lastRefresh;
  }


  /**
   * Sets the value of the 'lastRefresh' field.
   * @param value the value to set.
   */
  public void setLastRefresh(java.time.LocalDate value) {
    this.lastRefresh = value;
  }

  /**
   * Creates a new AuthenticationRequestAvroModel RecordBuilder.
   * @return A new AuthenticationRequestAvroModel RecordBuilder
   */
  public static pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder newBuilder() {
    return new pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder();
  }

  /**
   * Creates a new AuthenticationRequestAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AuthenticationRequestAvroModel RecordBuilder
   */
  public static pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder newBuilder(pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder other) {
    if (other == null) {
      return new pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder();
    } else {
      return new pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new AuthenticationRequestAvroModel RecordBuilder by copying an existing AuthenticationRequestAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new AuthenticationRequestAvroModel RecordBuilder
   */
  public static pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder newBuilder(pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel other) {
    if (other == null) {
      return new pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder();
    } else {
      return new pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for AuthenticationRequestAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AuthenticationRequestAvroModel>
    implements org.apache.avro.data.RecordBuilder<AuthenticationRequestAvroModel> {

    private java.util.UUID id;
    private java.lang.String bookmakerIdentifier;
    private java.lang.String authenticationInputData;
    private java.time.LocalDate lastRefresh;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.bookmakerIdentifier)) {
        this.bookmakerIdentifier = data().deepCopy(fields()[1].schema(), other.bookmakerIdentifier);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.authenticationInputData)) {
        this.authenticationInputData = data().deepCopy(fields()[2].schema(), other.authenticationInputData);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.lastRefresh)) {
        this.lastRefresh = data().deepCopy(fields()[3].schema(), other.lastRefresh);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing AuthenticationRequestAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bookmakerIdentifier)) {
        this.bookmakerIdentifier = data().deepCopy(fields()[1].schema(), other.bookmakerIdentifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.authenticationInputData)) {
        this.authenticationInputData = data().deepCopy(fields()[2].schema(), other.authenticationInputData);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastRefresh)) {
        this.lastRefresh = data().deepCopy(fields()[3].schema(), other.lastRefresh);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookmakerIdentifier' field.
      * @return The value.
      */
    public java.lang.String getBookmakerIdentifier() {
      return bookmakerIdentifier;
    }


    /**
      * Sets the value of the 'bookmakerIdentifier' field.
      * @param value The value of 'bookmakerIdentifier'.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder setBookmakerIdentifier(java.lang.String value) {
      validate(fields()[1], value);
      this.bookmakerIdentifier = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bookmakerIdentifier' field has been set.
      * @return True if the 'bookmakerIdentifier' field has been set, false otherwise.
      */
    public boolean hasBookmakerIdentifier() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bookmakerIdentifier' field.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder clearBookmakerIdentifier() {
      bookmakerIdentifier = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'authenticationInputData' field.
      * @return The value.
      */
    public java.lang.String getAuthenticationInputData() {
      return authenticationInputData;
    }


    /**
      * Sets the value of the 'authenticationInputData' field.
      * @param value The value of 'authenticationInputData'.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder setAuthenticationInputData(java.lang.String value) {
      validate(fields()[2], value);
      this.authenticationInputData = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'authenticationInputData' field has been set.
      * @return True if the 'authenticationInputData' field has been set, false otherwise.
      */
    public boolean hasAuthenticationInputData() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'authenticationInputData' field.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder clearAuthenticationInputData() {
      authenticationInputData = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastRefresh' field.
      * @return The value.
      */
    public java.time.LocalDate getLastRefresh() {
      return lastRefresh;
    }


    /**
      * Sets the value of the 'lastRefresh' field.
      * @param value The value of 'lastRefresh'.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder setLastRefresh(java.time.LocalDate value) {
      validate(fields()[3], value);
      this.lastRefresh = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lastRefresh' field has been set.
      * @return True if the 'lastRefresh' field has been set, false otherwise.
      */
    public boolean hasLastRefresh() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lastRefresh' field.
      * @return This builder.
      */
    public pl.betka.infrastructure.kafka.model.avro.AuthenticationRequestAvroModel.Builder clearLastRefresh() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AuthenticationRequestAvroModel build() {
      try {
        AuthenticationRequestAvroModel record = new AuthenticationRequestAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.bookmakerIdentifier = fieldSetFlags()[1] ? this.bookmakerIdentifier : (java.lang.String) defaultValue(fields()[1]);
        record.authenticationInputData = fieldSetFlags()[2] ? this.authenticationInputData : (java.lang.String) defaultValue(fields()[2]);
        record.lastRefresh = fieldSetFlags()[3] ? this.lastRefresh : (java.time.LocalDate) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AuthenticationRequestAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<AuthenticationRequestAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AuthenticationRequestAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<AuthenticationRequestAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










